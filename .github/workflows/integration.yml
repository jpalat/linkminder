name: Integration Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM
  workflow_dispatch:

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.changes.outputs.backend }}
      frontend: ${{ steps.changes.outputs.frontend }}
      extension: ${{ steps.changes.outputs.extension }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            backend:
              - '*.go'
              - 'go.mod'
              - 'go.sum'
              - 'migrations/**'
            frontend:
              - 'frontend/**'
            extension:
              - 'extension/**'

  full-stack-test:
    needs: detect-changes
    if: |
      always() && (
        needs.detect-changes.outputs.backend == 'true' || 
        needs.detect-changes.outputs.frontend == 'true' ||
        github.event_name == 'schedule' ||
        github.event_name == 'workflow_dispatch'
      )
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
      
      - name: Start backend server
        run: |
          echo "Installing Go dependencies..."
          go mod download
          
          echo "Starting backend server..."
          go run main.go &
          SERVER_PID=$!
          echo $SERVER_PID > backend.pid
          
          echo "Waiting for server to start..."
          for i in {1..30}; do
            if curl -f http://localhost:9090/topics >/dev/null 2>&1; then
              echo "Backend server started successfully on attempt $i"
              exit 0
            fi
            if ! kill -0 $SERVER_PID 2>/dev/null; then
              echo "Server process died unexpectedly"
              echo "Checking for common issues..."
              echo "Port 9090 status:"
              netstat -tuln | grep 9090 || echo "Port 9090 not in use"
              exit 1
            fi
            echo "Attempt $i: Server not ready yet, waiting 2 seconds..."
            sleep 2
          done
          
          echo "Server failed to start after 60 seconds"
          echo "Final check - is process still running?"
          kill -0 $SERVER_PID 2>/dev/null && echo "Process is running" || echo "Process is dead"
          echo "Trying one more curl attempt..."
          curl -v http://localhost:9090/topics || true
          exit 1
      
      - name: Install frontend dependencies
        working-directory: ./frontend
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          else
            echo "No package-lock.json found, skipping frontend tests"
          fi
      
      - name: Run API integration tests
        run: |
          echo "Testing bookmark creation..."
          curl -X POST http://localhost:9090/bookmark \
            -H "Content-Type: application/json" \
            -d '{"url": "https://example.com", "title": "Test Bookmark", "action": "read-later"}' \
            -f || (echo "Bookmark creation failed" && exit 1)
          
          echo "Testing topics retrieval..."
          curl -f http://localhost:9090/topics || (echo "Topics retrieval failed" && exit 1)
          
          echo "Testing stats endpoint..."
          curl -f http://localhost:9090/api/stats/summary || (echo "Stats endpoint failed" && exit 1)
          
          echo "All API integration tests passed"
      
      - name: Test database operations
        run: |
          echo "Testing database file creation..."
          test -f bookmarks.db || (echo "Database file not created" && exit 1)
          
          echo "Testing database queries..."
          go run -c 'package main; import ("database/sql"; _ "github.com/mattn/go-sqlite3"); func main() { db, err := sql.Open("sqlite3", "bookmarks.db"); if err != nil { panic(err) }; defer db.Close(); var count int; db.QueryRow("SELECT COUNT(*) FROM bookmarks").Scan(&count); println("Bookmarks count:", count) }'
      
      - name: Cleanup
        if: always()
        run: |
          echo "Stopping backend server..."
          if [[ -f backend.pid ]]; then
            SERVER_PID=$(cat backend.pid)
            if kill -0 $SERVER_PID 2>/dev/null; then
              echo "Killing server process $SERVER_PID"
              kill $SERVER_PID || true
              sleep 2
              # Force kill if still running
              kill -9 $SERVER_PID 2>/dev/null || true
            else
              echo "Server process $SERVER_PID was not running"
            fi
          else
            echo "No backend.pid file found"
          fi
          
          # Kill any remaining Go processes
          pkill -f "go run main.go" || true
          pkill -f "main.go" || true
          
          echo "Integration tests completed"