name: Release

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write
  packages: write

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      tag_name: ${{ steps.get_version.outputs.VERSION }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Get version
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      
      - name: Generate changelog
        id: changelog
        run: |
          # Generate changelog since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          if [[ -n "$LAST_TAG" ]]; then
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" ${LAST_TAG}..HEAD)
          else
            CHANGELOG=$(git log --pretty=format:"- %s (%h)")
          fi
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          release_name: BookMinder ${{ steps.get_version.outputs.VERSION }}
          body: |
            ## What's Changed
            ${{ steps.changelog.outputs.CHANGELOG }}
            
            ## Installation
            
            ### Binary Download
            Download the appropriate binary for your platform below.
            
            ### Docker
            ```bash
            docker pull ghcr.io/${{ github.repository }}:${{ steps.get_version.outputs.VERSION }}
            ```
            
            ### Go Install
            ```bash
            go install github.com/${{ github.repository }}@${{ steps.get_version.outputs.VERSION }}
            ```
            
            ## Components
            - **Go API Backend**: Single binary with SQLite database
            - **Vue.js Frontend**: Modern web interface
            - **Chrome Extension**: One-click bookmark saving
          draft: false
          prerelease: ${{ contains(steps.get_version.outputs.VERSION, '-') }}

  build-linux:
    needs: create-release
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
      
      - name: Build binary
        env:
          GOOS: linux
          GOARCH: amd64
          CGO_ENABLED: 1
        run: |
          echo "Building for linux/amd64..."
          go build -ldflags="-s -w -X main.Version=${{ needs.create-release.outputs.tag_name }}" -o bookminderapi main.go
          
          # Create release package
          PACKAGE_NAME="bookminderapi-linux-amd64"
          mkdir "${PACKAGE_NAME}"
          cp bookminderapi "${PACKAGE_NAME}/"
          cp -r migrations "${PACKAGE_NAME}/"
          cp README.md "${PACKAGE_NAME}/"
          
          # Create installation script
          echo "#!/bin/bash" > "${PACKAGE_NAME}/install.sh"
          echo "echo \"Installing BookMinder API...\"" >> "${PACKAGE_NAME}/install.sh"
          echo "sudo cp bookminderapi /usr/local/bin/" >> "${PACKAGE_NAME}/install.sh"
          echo "sudo chmod +x /usr/local/bin/bookminderapi" >> "${PACKAGE_NAME}/install.sh"
          echo "echo \"Installation complete. Run 'bookminderapi' from anywhere.\"" >> "${PACKAGE_NAME}/install.sh"
          chmod +x "${PACKAGE_NAME}/install.sh"
          tar -czf "${PACKAGE_NAME}.tar.gz" "${PACKAGE_NAME}"
          
          echo "ASSET_PATH=${PACKAGE_NAME}.tar.gz" >> $GITHUB_ENV
          echo "ASSET_NAME=${PACKAGE_NAME}.tar.gz" >> $GITHUB_ENV
      
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ env.ASSET_PATH }}
          asset_name: ${{ env.ASSET_NAME }}
          asset_content_type: application/octet-stream

  build-extension:
    needs: create-release
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./extension
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
      
      - name: Update version in manifest
        run: |
          VERSION=${{ needs.create-release.outputs.tag_name }}
          VERSION=${VERSION#v}  # Remove 'v' prefix
          if [ -f manifest.json ]; then
            sed -i "s/\"version\": \".*\"/\"version\": \"$VERSION\"/" manifest.json
          else
            echo "manifest.json not found, skipping version update"
          fi
      
      - name: Install dependencies and build
        run: |
          if [ -f package.json ]; then
            npm ci
            if npm run build 2>/dev/null; then
              echo "Extension built successfully"
            else
              echo "No build script found, copying files directly"
              mkdir -p build
              cp -r *.js *.html *.json *.png build/ || true
            fi
          else
            echo "No package.json found, copying files directly"
            mkdir -p build
            cp -r *.js *.html *.json *.png build/ || true
          fi
      
      - name: Create extension packages
        run: |
          if [ -d build ]; then
            cd build
          fi
          
          # Chrome package
          zip -r ../bookminder-chrome-extension-${{ needs.create-release.outputs.tag_name }}.zip . || true
          
          # Firefox package (same as Chrome for now)
          zip -r ../bookminder-firefox-extension-${{ needs.create-release.outputs.tag_name }}.zip . || true
          
          cd ..
          ls -la *.zip || echo "No extension packages created"
      
      - name: Upload Chrome Extension
        if: hashFiles('extension/bookminder-chrome-extension-*.zip') != ''
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./extension/bookminder-chrome-extension-${{ needs.create-release.outputs.tag_name }}.zip
          asset_name: bookminder-chrome-extension-${{ needs.create-release.outputs.tag_name }}.zip
          asset_content_type: application/zip
      
      - name: Upload Firefox Extension
        if: hashFiles('extension/bookminder-firefox-extension-*.zip') != ''
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./extension/bookminder-firefox-extension-${{ needs.create-release.outputs.tag_name }}.zip
          asset_name: bookminder-firefox-extension-${{ needs.create-release.outputs.tag_name }}.zip
          asset_content_type: application/zip